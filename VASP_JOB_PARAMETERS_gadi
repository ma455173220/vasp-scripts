#!/bin/bash

REMOVE_RENAME_FILES="CHG PCDAT REPORT" # vaspout.h5
COPY_RENAME_FILES="CONTCAR OSZICAR OUTCAR XDATCAR EIGENVAL" 
BACKUP_INPUT_FILES="INCAR POSCAR"

job_auto_submission () {
	FUNCTION_CHOSEN=`grep "\.T\." VASP_AUTO_SUBMISSION |  awk -F '=|#' '{print $2}'`
	FUNCTION_CHOSEN_NO_SPACE=`echo $FUNCTION_CHOSEN`
	if [ "$FUNCTION_CHOSEN" ] ; then
		sh /home/561/hm1876/vasp_scripts_self_created/${FUNCTION_CHOSEN_NO_SPACE}.sh 1> /dev/null
		sed -i 's/\.T\./\.F\./' VASP_AUTO_SUBMISSION
	else
		echo "No vasp_auto_submission chosen"
	fi
}

bader_cal (){

	/home/561/hm1876/vtstscripts/chgsum.pl  AECCAR0 AECCAR2
	/home/561/hm1876/.local/bin/bader CHGCAR -ref CHGCAR_sum 
	rm -rf $PBS_O_WORKDIR/AECCAR* $PBS_O_WORKDIR/CHGCAR_sum
}

log_report (){

	echo -e "\n------------------------------------------------------" >> ~/vasp_job_log
	echo -e "Job finished at \c" >> ~/vasp_job_log && date >> ~/vasp_job_log
	echo -e "PATH: $PBS_O_WORKDIR" >> ~/vasp_job_log
	echo -e "------------------------------------------------------" >> ~/vasp_job_log

}

backup_input_files () {                               
        for ii in $BACKUP_INPUT_FILES ; do       
                cp $ii ${JOBNAME}_${ii}         
        done                                    
        # - exit the script                     
}                                               

rename_files () {
#        for i in $MOVE_RENAME_FILES ; do
#                mv $i ${JOBNAME}_${i}
#        done
        for ii in $COPY_RENAME_FILES ; do
                cp $ii ${JOBNAME}_${ii}
        done
	if [ -s CONTCAR ] ; then
		cp CONTCAR POSCAR
	fi
        # - exit the script
}

remove_files (){

        for ii in $REMOVE_RENAME_FILES ; do
		rm $ii
        done


}

print_band_gap (){
	echo 911 | vaspkit > band_gap
	#v1.3.0
	#echo 211 | vaspkit 
	#v1.2.2
	echo -e "211\n" | vaspkit
	python3 /home/561/hm1876/.local/bin/band_vaspkit.py
}

print_dos (){
	echo -e "111\n1" | vaspkit > TDOS_log
	echo -e "113\nall\n1" | vaspkit > PDOS_log
	echo -e "116" | vaspkit > LDOS_log
}

CHECK_AUTO_STOP (){

	cd $PBS_O_WORKDIR
	COUNTER=0
	COUNTER_MAX=288
	while [ $COUNTER -le $COUNTER_MAX ]; do
		if [ -a AUTOSTOP ] ; then
		        AUTO_STOP &
			exit
		else
			sleep 600s
			(( COUNTER++ ))
		fi
	done
}

AUTO_STOP (){

	cd $PBS_O_WORKDIR
	SLEEP_TIME=`cat AUTOSTOP`
	sleep $SLEEP_TIME
	cp /home/561/hm1876/STOPCAR $PBS_O_WORKDIR
	rm AUTOSTOP
}

check_completion() {
    local outcar_file="$PWD/OUTCAR"
    local mode_check=`grep -v "^#" INCAR | grep "IBRION" | sed 's/.*IBRION[[:space:]]*=[[:space:]]*\([0-9-][0-9]*\).*/\1/' | tail -1`

    if [[ ! -f "$outcar_file" ]]; then
        echo "$(date): Job failed - OUTCAR not found in $PWD" >> ~/vasp_fail_log
        return 1
    fi

    if ! grep -q "Total CPU time used" "$outcar_file"; then
        echo "$(date): Job failed - Job did not complete normally in $PWD" >> ~/vasp_fail_log
        return 1
    fi

    if [[ -z "$mode_check" ]] || [[ "$mode_check" != "-1" ]]; then
        # Optimization job
        if ! grep -q "reached required accuracy" "$outcar_file" || ! grep -q "EDIFF is reached" "$outcar_file"; then
            echo "$(date): Job failed - Optimization did not converge in $PWD" >> ~/vasp_fail_log
            return 1
        fi
    else
        # SCF job
        if ! grep -q "EDIFF is reached" "$outcar_file"; then
            echo "$(date): Job failed - SCF did not converge in $PWD" >> ~/vasp_fail_log
            return 1
        fi
    fi

    return 0
}


final_act (){
	MODE_CHECK=`grep -v "^#" INCAR | grep "IBRION" | sed 's/.*IBRION[[:space:]]*=[[:space:]]*\([0-9-][0-9]*\).*/\1/' | tail -1`
	if [ $MODE_CHECK -ne -1 ] ; then
		rename_files
	fi
    rename_files
	remove_files
	log_report
    check_completion || exit 1
    if [ -e AECCAR2 ] ; then
        bader_cal
    fi

    print_band_gap
    print_dos

	if [ -e VASP_AUTO_SUBMISSION ] ; then
		job_auto_submission
	fi
	exit

}

# MODE_CHECK=`grep "^IBRION" INCAR | awk -F ' '  '{print $3}'`
# if [ $MODE_CHECK -ne -1 ] ; then
# 	backup_input_files
# fi
backup_input_files
# sh /home/561/hm1876/vasp_scripts_self_created/vasp_monitor.sh &
# CHECK_AUTO_STOP &
trap 'final_act' EXIT
