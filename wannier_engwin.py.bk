#!/apps/python3/3.10.0/bin/python3
import sys
import xml.dom.minidom
import argparse

"""
Usage:
    wannier_eigwin.py EIGENVAL -e BAND_INDEX [-s spinup/spindw] (e.g., wannier_eigwin.py EIGENVAL -e 5 -s spinup)
    wannier_eigwin.py EIGENVAL -n BAND_RANGE [-s spinup/spindw] (e.g., wannier_eigwin.py EIGENVAL -n -1.6 1.6 -s spindw)

Options:
    EIGENVAL           Path to the EIGENVAL file
    -e                  Option to extract the eigenvalues and eigenvectors for a single band
    BAND_INDEX         Index of the band to extract
    -n                  Option to extract the eigenvalues and eigenvectors for a range of bands
    BAND_RANGE         Range of bands to extract, e.g., "5 10"
    -s
    spinup/spindw      Specify the spin channel to extract (default=None)
                       For ISPIN=1, this option is not required

"""

# Define the command line arguments and help information
parser = argparse.ArgumentParser(usage='%(prog)s [-h] EIGENVAL (-e band_index | -n energy1 energy2) [-s spinup/spindw]', description='Extract data from EIGENVAL files.')
parser.add_argument('filename', metavar='EIGENVAL', type=str, help='Path to the EIGENVAL file')
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('-e', metavar='band_index', type=int, help='Specify a single band to extract')
group.add_argument('-n', metavar=('energy1', 'energy2'), type=float, nargs=2, help='Specify an energy range to extract')
parser.add_argument('-s', metavar='spin', type=str, choices=['spinup', 'spindw'], default=None, help='Specify the spin channel to extract (default=None)')

# Parse the command line arguments
args = parser.parse_args()

# Check the options and extract the relevant information
if args.e is not None:
    # Process the case where the option is "e" and extract a single band
    band_index = args.e
elif args.n is not None:
    # Process the case where the option is "n" and extract an energy range
    energy1, energy2 = args.n
else:
    # If the arguments are not valid, print an error message and exit
    print("ERROR: Incorrect usage.")
    parser.print_help()
    exit(1)

# Extract the spin channel if specified
spin = args.s

def get_energies(xml_name):
    # VASP EIGENVAL format
    if xml_name == "EIGENVAL":
        with open("EIGENVAL", "r") as eigenval:
            raw_content = eigenval.readlines()
        content = raw_content[7:]
        entries = []
        for i, line in enumerate(content):
            if len(line.split()) == 4:
                entries.append(i)
        eng_full = []
        for i in entries:
            eng_ki = []
            for line in content[i+1:]:
                if len(line.split()) == 3:
                    n, energy, occ = line.split()
                    eng_ki.append(float(energy))
                elif len(line.split()) == 5:
                   if args.s is None:
                       print("ERROR: '-s' argument is required for spin-polarized calculation.")
                       parser.print_help()
                       exit(1)
                   else:
                       if args.s not in ["spinup", "spindw"]:
                           print("ERROR: '-s' argument must be 'spinup' or 'spindw'.")
                           parser.print_help()
                           exit(1)
                       else:
                           spin = args.s
                   n, energy_up, energy_dw, occ_up, occ_dw = line.split()
                   if spin == "spinup":
                       eng_ki.append(float(energy_up))
                   elif spin == "spindw":
                       eng_ki.append(float(energy_dw))
                # If the line is empty, stop reading the band energies
                else:
                    break
            eng_full.append(eng_ki)
    # Quantum ESPRESSO and FLEUR xml format
    else:
        Har2eV = 13.60569253 * 2
        dom = xml.dom.minidom.parse(xml_name)
        root = dom.documentElement
        eng_full = []
        if root.nodeName == "fleurOutput":
            eigenvalues = root.getElementsByTagName("eigenvalues")[-1]
            eks = eigenvalues.getElementsByTagName("eigenvaluesAt")
            eng_full = [[float(f) * Har2eV for f in ek.childNodes[0].data.split()] for ek in eks]
        elif root.nodeName == "qes:espresso":
            eigenvalues = root.getElementsByTagName("eigenvalues")
            eng_full = [[float(f) * Har2eV for f in ek.childNodes[0].data.split()] for ek in eigenvalues]
        else:
            raise RuntimeError("Unknown xml output")
    return eng_full


def main():
    xml_name = sys.argv[1]
    option = sys.argv[2]
    if option == "-e":
        # Band index is counted from 1, NOT 0.
        band_index = int(sys.argv[3])
        eng_full = get_energies(xml_name)
        eng_selected =[eng[band_index-1] for eng in eng_full]
        emin = min(eng_selected)
        emax = max(eng_selected)
        print("emin = %f" % emin)
        print("emax = %f" % emax)
    elif option == "-n":
        # Energies are in eV, not Hartree.
        emin = float(sys.argv[3])
        emax = float(sys.argv[4])
        eng_full = get_energies(xml_name)
        for ik, ek in enumerate(eng_full):
            num_bands = 0
            for eng in ek:
                if eng >= emin and eng <= emax:
                    num_bands += 1
            print("ik = %d, nbnd = %d" % (ik+1, num_bands))
    else:
        print("ERROR: unknown option '%s'" % option)

if __name__ == "__main__":
    main()
